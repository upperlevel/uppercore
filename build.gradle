import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id "java-library"
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "io.freefair.lombok" version "8.6"
    // id "checkstyle"
}

group = "xyz.upperlevel.uppercore"
version = "2.0.3"
description = "Global API for Spigot plugins"

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

project.ext {
    mcVersion = "1.20.4"
}

test {
    testLogging {
        exceptionFormat = "full"
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java')
        }
        resources {
            srcDir file('src/integration-test/resources')
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/" // maven snapshots
    }
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" // bukkit
    }
    maven {
        url 'https://jitpack.io' // vault
    }
    maven {
        url "https://repo.codemc.org/repository/maven-public" // bstats
    }
    maven {
        url "https://maven.elmakers.com/repository/" // EffectLib
    }
    maven {
        url "https://repo.extendedclip.com/content/repositories/placeholderapi/" // PlaceholderAPI
    }
    maven {
        url "https://repo.dmulloy2.net/nexus/repository/public/" // ProtocolLib
    }
}

dependencies {
    /* JUnit */
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    /* Mockito */
    testImplementation "org.mockito:mockito-core:3.+"
    /* Apache commons */
    api 'org.apache.commons:commons-lang3:3.14.0'

    /* Spigot API */
    compileOnly "org.spigotmc:spigot-api:" + mcVersion
    testImplementation "org.spigotmc:spigot-api:" + mcVersion
    integrationTestCompileOnly "org.spigotmc:spigot-api:" + mcVersion

    /* Bukkit */
    /*compileOnly "org.bukkit:bukkit:" + mcVersion
    testImplementation "org.bukkit:bukkit:" + mcVersion
    integrationTestCompileOnly "org.bukkit:bukkit:" + mcVersion
    */


    api "xyz.upperlevel.spigot.anvilgui:spigot-anvil-gui:1.3" // anvil-gui
    compileOnly "me.clip:placeholderapi:2.10.9" // placeholder-api
    integrationTestCompileOnly "me.clip:placeholderapi:2.11.5" // placeholder-api
    compileOnly "com.github.MilkBowl:VaultAPI:1.7" // vault
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.5.0"; // ProtocolLib

    api "org.bstats:bstats-bukkit:1.7" // metrics

    /* Db */
    compileOnly "org.mongodb:mongo-java-driver:3.12.4"
    compileOnly "com.rethinkdb:rethinkdb-driver:2.3.3"
    compileOnly "org.dizitart:nitrite:3.4.1"
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

shadowJar {
    archiveBaseName = null

    relocate "org.bstats", "${project.group}.libs.metrics"
    relocate "org.apache.commons", "${project.group}.libs.acommons"
}

task testJar(type: ShadowJar) {
    archiveBaseName = "test"

    dependsOn tasks.shadowJar

    from zipTree(shadowJar.outputs.files.singleFile)
    from sourceSets.integrationTest.output
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
    /*repositories {
        maven {
            url "http://repo.myorg.com"
        }
    }*/
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

/*
checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    configProperties = [
            'configDir': rootProject.file('config/checkstyle'),
            'baseDir': rootDir,
    ]
    toolVersion = '7.3'
    ignoreFailures = true
}
*/

// This part of the config is needed to filter the class UppercoreInfo.java, replacing the needed properties


task generateUppercoreInfo(type: Copy) {
    println(buildDir)
    from ("${projectDir}/src/main/java/xyz/upperlevel/uppercore") {
        include "UppercoreInfo.java"

        filter { line -> line.replaceAll('@project.version@', (String)project.property("version")) }
    }
    into "$buildDir/generated/sources/custom"
}

sourceSets {
    main {
        java {
            srcDirs ("${projectDir}/src/main/java", "${buildDir}/generated/sources/custom")
            exclude("xyz/upperlevel/uppercore/UppercoreInfo.java")
        }
    }
}

compileJava {
    options.compilerArgs += ['-parameters']

    dependsOn generateUppercoreInfo
}
